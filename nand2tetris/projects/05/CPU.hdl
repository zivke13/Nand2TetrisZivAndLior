

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
    // get type of instruction
    Not(in=instruction[15], out=Ain);
    Not(in=Ain, out=Cin);
    
    And(a=Cin, b=instruction[5], out=ALUtoA);    
    Mux16(a=instruction, b=ALUo, sel=ALUtoA, out=Areg);
    
	//around a register
    Or(a=Ain, b=ALUtoA, out=loadA);   
    ARegister(in=Areg, load=loadA, out=Aout);
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout); 

	//around dregister and alu
    And(a=Cin, b=instruction[4], out=loadD);
    DRegister(in=ALUo, load=loadD, out=Dout);    
    ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUo, zr=ZRout, ng=NGout);
        
    
	//write to memo
    Or16(a=false, b=Aout, out[0..14]=addressM);
    And(a=Cin, b=instruction[3], out=writeM);
	Or16(a=false, b=ALUo, out=outM);
    
	Or(a=ZRout, b=NGout, out=zOrn);
    Not(in=zOrn, out=positive);   
	And(a=positive, b=instruction[0], out=gt); 	
    And(a=ZRout, b=instruction[1], out=eq);    
    And(a=NGout, b=instruction[2], out=lt);    
    
    Or(a=eq, b=lt, out=le);
    Or(a=le, b=gt, out=ok);
	
    And(a=Cin, b=ok, out=PCl); 
    Not(in=PCl, out=PCi);                 
    PC(in=Aout, inc=PCi, load=PCl, reset=reset, out[0..14]=pc);
}