// This file is part of nand2tetris, as taught in The Hebrew University,
// and was written by Aviv Yaish, and is published under the Creative 
// Common Attribution-NonCommercial-ShareAlike 3.0 Unported License 
// https://creativecommons.org/licenses/by-nc-sa/3.0/

// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The output is defined as follows:
// If instruction[7..8] == 1, 1, the output is the same as the regular ALU,
// where instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no.
// If instruction[8] == 0, the output will be a shift of the input:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x", 
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
    PARTS:
    ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=alu, zr=aluzr, ng=alung);
	Mul(a=x, b=y, out=mulxy);
	ShiftRight(in=x, out=rightx);
	ShiftRight(in=y, out=righty);
	ShiftLeft(in=x, out=leftx);
	ShiftLeft(in=y, out=lefty);
	Mux4Way16(a=righty, b=rightx, c=lefty, d=leftx, sel=instruction[4..5], out=shiftout);
	Mux4Way16(a=mulxy, b=shiftout, c=mulxy, d=alu, sel=instruction[7..8], out=out, out[15]=ng, out[0..7]=or1, out[8..15]=or2);
	Or8Way(in=or1, out=o1);
	Or8Way(in=or2, out=o2);
	Or(a=o1, b=o2, out=nzr);
	Not(in=nzr, out=zr);
}
