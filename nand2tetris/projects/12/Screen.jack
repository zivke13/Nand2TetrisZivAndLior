// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static int screen_size, color;
    static Array two_powers;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let screen = 16384;
        let screen_size = 8192;
        let color = 1;

        let two_powers = Array.new(16);
        let two_powers[0] = 1;
        let i = 0;
        while (i < 16) {
            let two_powers[i + 1] = two_powers[i] + two_powers[i];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int ind;
        let ind = 0;
        while (ind < screen_size) {
            let screen[ind] = 0;
            let ind = ind + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let color = 1;
        }
        else {
            let color = 0;
        }
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value, bit;
        let address = screen + ((32 * y) + (x / 16));
        let value = Memory.peek(address);

        let bit = two_powers[x - ((x / 16) * 16)];
        if (color = 0) {
            let value = value & ~bit;
        }
        else {
            let value = value | bit;
        }

        do Memory.poke(address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x_dir, y_dir, a, b, diff, dx, dy;

        if (y1 = y2) {
            if (x1 < x2) {
                let a = x1;
                let b = x2;
            }
            else {
                let a = x2;
                let b = x1;
            }
            while(a < (b + 1)) {
                do Screen.drawPixel(a, y1);
                let a = a + 1;
            }
            return;
        }

        if (x1 = x2) {
            if (y1 < y2) {
                let a = y1;
                let b = y2;
            }
            else {
                let a = y2;
                let b = y1;
            }
            while(a < (b + 1)) {
                do Screen.drawPixel(x1, a);
                let a = a + 1;
            }
            return;
        }

        if (x1 < x2) {
            let x_dir = 1;
            let dx = x2 - x1;
        }
        else {
            let x_dir = -1;
            let dx = x1 - x2;
        }

        if (y1 < y2) {
            let y_dir = 1;
            let dy = y2 - y1;
        }
        else {
            let y_dir = -1;
            let dy = y1 - y2;
        }

        let a = 0;
        let b = 0;
        let diff = 0;

        if ((x_dir = -1) & (y_dir = -1)) {
            let x_dir = 1;
            let y_dir = 1;
            let x1 = x2;
            let y1 = y2;
        }

        while ((a < (dx + 1)) & (b < (dy + 1))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                let a = a + x_dir;
                let diff = diff + dy;
            }
            else {
                let b = b + y_dir;
                let diff = diff - dx;
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;

        let y = y1;
        while (y < y2) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy;
        let dy = -r;

        while (dy < (r + 1)) {
            do Screen.drawLine(x - Math.sqrt((r * r) - (dy * dy)), y + dy, x + Math.sqrt((r * r) - (dy * dy)), y + dy);
            let dy = dy + 1;
        }

        return;
    }
}
