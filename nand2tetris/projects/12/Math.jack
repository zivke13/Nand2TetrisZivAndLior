// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static int twos;
    /** Initializes the library. */
    function void init()
    {
        let twos = Array.new(16);
        let twos[0] = 1;
        var int i;
        let i = 1;

        while(i <16)
        {
         let twos[i] = twos[i - 1] + twos[i - 1];
         let i = i + 1;
        }
        return;
    }


    function int two_power(int pow) {
        return twos[pow];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if( x < 0) {
            let x = -x;
        }
        return x
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX;
        let sum = 0;
        let shiftedX = x;
        var int j;
        let j = 0;
        while( j < 16 ) {   // 16-bit numbers
            if(~((y & twos[j]) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int neg_x, neg_y;
        var int q;
        var int division;

        let neg_x = x < 0;
        let neg_y = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if(y > x)
        {
        return 0;
        }
        var int q;
        let q = Math.divide(x, y + y);
        if((x-(2*q*y)) < y)
        {
            let division = q + q;
        }
        else
        {
            let division = q + q + 1
        }

        if( neg_y = neg_x)
        {
            return division;
        }
        else {
            return -division
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
            var int j, y;
        var int temp;
        var int temp_squared;

        let y = 0;
        let j = 7;      // = #bits / 2 - 1
        while( ~(j < 0) ) {
            let temp = y + twos[j];
            let temp_squared = temp * temp;
            if( ~(temp_squared > x) & (temp_squared > 0) ) {    // in case of overflow
                let y = temp;
            }
            let j = j - 1;
        }
        return y;

    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if( a > b ) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if( a < b ) {
            return a;
        }
        else {
            return b;
        }
    }
}
